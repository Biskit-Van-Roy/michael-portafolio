/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 spaceman.glb 
Author: wallmasterr (https://sketchfab.com/wallmasterr)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/tenhun-falling-spaceman-fanart-9fd80b6a259f41fd99e6f56eee686dc5
Title: Tenhun Falling spaceman (FanArt)
*/

import React, { useEffect, useRef, useLayoutEffect } from "react";
import * as THREE from "three";
import { useFrame, useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations, useScroll } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { gsap } from "gsap";

export const FLOOR_HEIGHT = 2.3;
export const NB_FLOORS = 3;

export function Spaceman(props) {
  const group = useRef();
  const { scene, animations } = useGLTF("/models/spaceman.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { actions } = useAnimations(animations, group);
  const scroll = useScroll();
  const tl = useRef(null);

  /**
   * 1) Creamos un timeline GSAP que:
   *    - Mueve el grupo completo en Y/Z (como ya hacías)
   *    - Rota/mueve **cada hueso (Bone)** de manera independiente
   * 2) Lo dejamos en pausa y lo “scrubbeamos” con el scroll usando .progress()
   */
  useLayoutEffect(() => {
    if (!group.current) return;
    
    const bones = [];
    group.current.traverse((obj) => {
      if (obj.isBone) bones.push(obj);
    });

    if (!bones.length) {
      console.warn("No se encontraron bones para animar. Revisa el GLB.");
    }
    const ctx = gsap.context(() => {
      tl.current = gsap.timeline({ paused: true });

      
      tl.current.to(
        group.current.position,
        {
          duration: 2,
          y: -FLOOR_HEIGHT * (NB_FLOORS - 1),
          z: -10,
          ease: "none",
        },
        0
      );

      // 2) Rotaciones/movimientos independientes por hueso
      bones.forEach((bone, i) => {
        // Pequeña variación por índice para que no todos hagan lo mismo
        const dir = i % 2 === 0 ? 1 : -1;
        const dur = 1.5 + (i % 5) * 0.2;

        // Rotación independiente
        tl.current.to(
          bone.rotation,
          {
            duration: dur,
            x: `+=${Math.PI * dir}`,
            y: `+=${Math.PI * 2}`,
            z: `+=${Math.PI * 0.5 * dir}`,
            ease: "none",
          },
          0
        );

        // Ligero desplazamiento local (si el bone tiene posición animable)
        tl.current.to(
          bone.position,
          {
            duration: dur,
            x: bone.position.x + Math.sin(i) * 0.1,
            y: bone.position.y + Math.cos(i) * 0.1,
            z: bone.position.z + Math.sin(i * 0.3) * 0.1,
            ease: "sine.inOut",
          },
          0
        );
      });
    }, group);

    return () => {
      ctx.revert();
      tl.current = null;
    };
  }, []);

  /**
   * Sincronizamos el timeline con el scroll:
   * scroll.offset ∈ [0, 1] -> .progress() perfecto para scrub.
   */
  useFrame(() => {
    if (!tl.current) return;
    tl.current.progress(scroll.offset);
  });

  /**
   * Activa las animaciones del propio GLTF (si quieres mantenerlas).
   * OJO: Pueden “competir” con lo que haces en los bones. Si quieres
   * control total con GSAP, comenta este efecto.
   */
  useEffect(() => {
    const names = Object.keys(actions);
    names.forEach((name) => {
      actions[name]
        ?.reset()
        .setLoop(THREE.LoopRepeat, Infinity)
        .fadeIn(0.2)
        .play();
    });

    return () => names.forEach((name) => actions[name]?.stop());
  }, [actions]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]} scale={0.193}>
          <group name="Root">
            <group name="metarig">
              <primitive object={nodes.metarig_rootJoint} />
              <group name="Cube001" />
              <group name="Cube005" />
              <group name="Cube002" />
              <group name="Plane" />
              <group name="Cube008" />
              <group name="Cube004" />
              <group name="Cube003" />
              <group name="Cube" />
              <group name="Cube009" rotation={[-2.708, 0.013, -1.447]} scale={1.307} />
              <group name="Cube011" />
              <skinnedMesh
                name="Cube001_0"
                geometry={nodes.Cube001_0.geometry}
                material={materials["AstronautFallingTexture.png"]}
                skeleton={nodes.Cube001_0.skeleton}
              />
              <skinnedMesh
                name="Cube005_0"
                geometry={nodes.Cube005_0.geometry}
                material={materials["AstronautFallingTexture.png"]}
                skeleton={nodes.Cube005_0.skeleton}
              />
              <skinnedMesh
                name="Cube002_0"
                geometry={nodes.Cube002_0.geometry}
                material={materials["AstronautFallingTexture.png"]}
                skeleton={nodes.Cube002_0.skeleton}
              />
              <skinnedMesh
                name="Plane_0"
                geometry={nodes.Plane_0.geometry}
                material={materials["AstronautFallingTexture.png"]}
                skeleton={nodes.Plane_0.skeleton}
              />
              <skinnedMesh
                name="Cube008_0"
                geometry={nodes.Cube008_0.geometry}
                material={materials["AstronautFallingTexture.png"]}
                skeleton={nodes.Cube008_0.skeleton}
              />
              <skinnedMesh
                name="Cube004_0"
                geometry={nodes.Cube004_0.geometry}
                material={materials["AstronautFallingTexture.png"]}
                skeleton={nodes.Cube004_0.skeleton}
              />
              <skinnedMesh
                name="Cube003_0"
                geometry={nodes.Cube003_0.geometry}
                material={materials["AstronautFallingTexture.png"]}
                skeleton={nodes.Cube003_0.skeleton}
              />
              <skinnedMesh
                name="Cube_0"
                geometry={nodes.Cube_0.geometry}
                material={materials["AstronautFallingTexture.png"]}
                skeleton={nodes.Cube_0.skeleton}
              />
              <skinnedMesh
                name="Cube009_0"
                geometry={nodes.Cube009_0.geometry}
                material={materials["AstronautFallingTexture.png"]}
                skeleton={nodes.Cube009_0.skeleton}
              />
              <skinnedMesh
                name="Cube011_0"
                geometry={nodes.Cube011_0.geometry}
                material={materials["AstronautFallingTexture.png"]}
                skeleton={nodes.Cube011_0.skeleton}
              />
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/spaceman.glb");
